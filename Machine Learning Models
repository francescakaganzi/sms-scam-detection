{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gYesUKsiskQq"
      },
      "outputs": [],
      "source": [
        "# 1: Set up environment and mount Google Drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Set up project paths\n",
        "import os\n",
        "\n",
        "# Define project directory\n",
        "project_dir = '/content/drive/MyDrive/final-sms-scam-detection'\n",
        "os.chdir(project_dir)\n",
        "print(f\"Working directory: {os.getcwd()}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2: Install required packages\n",
        "!pip install numpy pandas scikit-learn matplotlib seaborn nltk joblib xgboost imbalanced-learn tqdm optuna"
      ],
      "metadata": {
        "id": "12SfY5TNsrhd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 3: Import required libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "import xgboost as xgb\n",
        "from sklearn.metrics import (\n",
        "    accuracy_score, precision_score, recall_score, f1_score,\n",
        "    matthews_corrcoef, roc_auc_score, average_precision_score,\n",
        "    confusion_matrix, classification_report, roc_curve, precision_recall_curve\n",
        ")\n",
        "from sklearn.model_selection import GridSearchCV, train_test_split, learning_curve, validation_curve, cross_val_score, StratifiedKFold\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import time\n",
        "import joblib\n",
        "from tqdm.notebook import tqdm\n",
        "import optuna\n",
        "from scipy import stats\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ],
      "metadata": {
        "id": "zDhb9b-0s1ms"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Set plotting style\n",
        "sns.set(style=\"whitegrid\")\n",
        "plt.rcParams[\"figure.figsize\"] = (12, 8)\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)"
      ],
      "metadata": {
        "id": "2jZ6wdt3s5Zt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 4: Load preprocessed data\n",
        "# Define paths\n",
        "data_dir = \"data/processed/\"\n",
        "model_dir = \"models/baseline/\"\n",
        "results_dir = \"results/\"\n",
        "\n",
        "# Create directories if they don't exist\n",
        "os.makedirs(model_dir, exist_ok=True)\n",
        "os.makedirs(os.path.join(results_dir, \"metrics\"), exist_ok=True)\n",
        "os.makedirs(os.path.join(results_dir, \"visualizations\"), exist_ok=True)\n",
        "\n",
        "# Load the processed dataset from the data exploration notebook\n",
        "try:\n",
        "    df = pd.read_csv(os.path.join(data_dir, \"sms_dataset_explored.csv\"))\n",
        "    print(f\"Loaded processed dataset with {len(df)} rows.\")\n",
        "except FileNotFoundError:\n",
        "    # If not found, load the original dataset\n",
        "    df = pd.read_csv(os.path.join(\"data/raw\", \"spam-fraud-sms-dataset.csv\"))\n",
        "    print(f\"Loaded original dataset with {len(df)} rows. Performing basic preprocessing...\")\n",
        "\n",
        "    # Ensure label is binary\n",
        "    if df['label'].dtype == object:\n",
        "        label_map = {'ham': 0, 'spam': 1}\n",
        "        df['label'] = df['label'].map(label_map)\n",
        "        df['label'] = df['label'].astype(int)\n",
        "\n",
        "    # Basic cleaning of text\n",
        "    import re\n",
        "    def clean_text(text):\n",
        "        if not isinstance(text, str):\n",
        "            return \"\"\n",
        "        # Convert to lowercase\n",
        "        text = text.lower()\n",
        "        # Remove URLs\n",
        "        text = re.sub(r'https?://\\S+|www\\.\\S+', '', text)\n",
        "        # Remove email addresses\n",
        "        text = re.sub(r'\\S+@\\S+', '', text)\n",
        "        # Remove phone numbers\n",
        "        text = re.sub(r'\\b\\d{10,}\\b', '', text)\n",
        "        text = re.sub(r'\\b\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b', '', text)\n",
        "        # Remove non-ASCII characters\n",
        "        text = re.sub(r'[^\\x00-\\x7F]+', '', text)\n",
        "        # Remove extra whitespace\n",
        "        text = re.sub(r'\\s+', ' ', text).strip()\n",
        "        return text\n",
        "\n",
        "    df['cleaned_text'] = df['message'].apply(clean_text)"
      ],
      "metadata": {
        "id": "R-U2gL3ds8-8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 5: Check if we have the cleaned_text column, if not create it\n",
        "if 'cleaned_text' not in df.columns:\n",
        "    print(\"Adding cleaned_text column...\")\n",
        "    import re\n",
        "    def clean_text(text):\n",
        "        if not isinstance(text, str):\n",
        "            return \"\"\n",
        "        # Convert to lowercase\n",
        "        text = text.lower()\n",
        "        # Remove URLs\n",
        "        text = re.sub(r'https?://\\S+|www\\.\\S+', '', text)\n",
        "        # Remove email addresses\n",
        "        text = re.sub(r'\\S+@\\S+', '', text)\n",
        "        # Remove phone numbers\n",
        "        text = re.sub(r'\\b\\d{10,}\\b', '', text)\n",
        "        text = re.sub(r'\\b\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b', '', text)\n",
        "        # Remove non-ASCII characters\n",
        "        text = re.sub(r'[^\\x00-\\x7F]+', '', text)\n",
        "        # Remove extra whitespace\n",
        "        text = re.sub(r'\\s+', ' ', text).strip()\n",
        "        return text\n",
        "\n",
        "    df['cleaned_text'] = df['message'].apply(clean_text)\n",
        "\n",
        "# Check class distribution\n",
        "class_dist = df['label'].value_counts(normalize=True)\n",
        "print(\"\\nClass distribution:\")\n",
        "print(f\"Class 0 (Legitimate): {class_dist.get(0, 0)*100:.2f}%\")\n",
        "print(f\"Class 1 (Spam/Scam): {class_dist.get(1, 0)*100:.2f}%\")"
      ],
      "metadata": {
        "id": "XNeI_SPgs-7c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 6: Split data into train, validation, and test sets\n",
        "# First split: separate test set (15%)\n",
        "train_val_df, test_df = train_test_split(\n",
        "    df, test_size=0.15, random_state=42, stratify=df['label']\n",
        ")\n",
        "\n",
        "# Second split: separate validation set from training set (15% of original, which is ~17.6% of train_val)\n",
        "train_df, val_df = train_test_split(\n",
        "    train_val_df, test_size=0.176, random_state=42, stratify=train_val_df['label']\n",
        ")\n",
        "\n",
        "print(f\"\\nSplit data into:\")\n",
        "print(f\"Training set: {len(train_df)} samples\")\n",
        "print(f\"Validation set: {len(val_df)} samples\")\n",
        "print(f\"Test set: {len(test_df)} samples\")\n",
        "\n",
        "# Save the splits for later use\n",
        "os.makedirs(data_dir, exist_ok=True)\n",
        "train_df.to_csv(os.path.join(data_dir, \"train.csv\"), index=False)\n",
        "val_df.to_csv(os.path.join(data_dir, \"val.csv\"), index=False)\n",
        "test_df.to_csv(os.path.join(data_dir, \"test.csv\"), index=False)"
      ],
      "metadata": {
        "id": "JNzDMIpAtBV9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 7: Feature extraction\n",
        "# Define a function for TF-IDF feature extraction\n",
        "def extract_tfidf_features(train_texts, val_texts, test_texts, max_features=5000):\n",
        "    \"\"\"Extract TF-IDF features from text data.\"\"\"\n",
        "    print(f\"Extracting TF-IDF features with max_features={max_features}...\")\n",
        "\n",
        "    # Initialize TF-IDF vectorizer\n",
        "    tfidf_vectorizer = TfidfVectorizer(\n",
        "        max_features=max_features,\n",
        "        ngram_range=(1, 2),\n",
        "        min_df=2,\n",
        "        max_df=0.95,\n",
        "        stop_words='english'\n",
        "    )\n",
        "\n",
        "    # Fit and transform training data\n",
        "    X_train = tfidf_vectorizer.fit_transform(train_texts)\n",
        "\n",
        "    # Transform validation and test data\n",
        "    X_val = tfidf_vectorizer.transform(val_texts)\n",
        "    X_test = tfidf_vectorizer.transform(test_texts)\n",
        "\n",
        "    print(f\"TF-IDF features extracted. Shape: X_train: {X_train.shape}, X_val: {X_val.shape}, X_test: {X_test.shape}\")\n",
        "\n",
        "    # Get feature names\n",
        "    feature_names = tfidf_vectorizer.get_feature_names_out()\n",
        "    print(f\"Example features: {feature_names[:10]}...\")\n",
        "\n",
        "    return X_train, X_val, X_test, tfidf_vectorizer\n",
        "\n",
        "# Extract features from text data\n",
        "X_train_tfidf, X_val_tfidf, X_test_tfidf, tfidf_vectorizer = extract_tfidf_features(\n",
        "    train_df['cleaned_text'],\n",
        "    val_df['cleaned_text'],\n",
        "    test_df['cleaned_text'],\n",
        "    max_features=5000\n",
        ")\n",
        "\n",
        "# Get labels\n",
        "y_train = train_df['label'].values\n",
        "y_val = val_df['label'].values\n",
        "y_test = test_df['label'].values"
      ],
      "metadata": {
        "id": "9XGH5MVStDlc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 8: Handle class imbalance using SMOTE\n",
        "print(\"\\nHandling class imbalance using SMOTE...\")\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_tfidf_resampled, y_train_resampled = smote.fit_resample(X_train_tfidf, y_train)\n",
        "\n",
        "# Check class distribution after SMOTE\n",
        "unique, counts = np.unique(y_train_resampled, return_counts=True)\n",
        "print(\"Class distribution after SMOTE:\")\n",
        "for label, count in zip(unique, counts):\n",
        "    print(f\"Class {label}: {count} samples ({count/len(y_train_resampled)*100:.2f}%)\")"
      ],
      "metadata": {
        "id": "49wFksqZtG6u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 9: Define baseline models with configurable regularization\n",
        "def get_models(random_seed=42, regularization_strength='moderate'):\n",
        "    \"\"\"Get baseline models with configurable regularization to combat overfitting.\n",
        "\n",
        "    Args:\n",
        "        random_seed (int): Random seed for reproducibility\n",
        "        regularization_strength (str): 'light', 'moderate', or 'strong'\n",
        "    \"\"\"\n",
        "\n",
        "    if regularization_strength == 'light':\n",
        "        # Original parameters\n",
        "        models = {\n",
        "            'logistic_regression': LogisticRegression(\n",
        "                C=1.0,\n",
        "                penalty='l2',\n",
        "                class_weight='balanced',\n",
        "                solver='liblinear',\n",
        "                max_iter=1000,\n",
        "                random_state=random_seed\n",
        "            ),\n",
        "            'random_forest': RandomForestClassifier(\n",
        "                n_estimators=100,\n",
        "                max_depth=None,\n",
        "                min_samples_split=2,\n",
        "                min_samples_leaf=1,\n",
        "                class_weight='balanced',\n",
        "                random_state=random_seed\n",
        "            ),\n",
        "            'decision_tree': DecisionTreeClassifier(\n",
        "                max_depth=None,\n",
        "                min_samples_split=2,\n",
        "                min_samples_leaf=1,\n",
        "                class_weight='balanced',\n",
        "                random_state=random_seed\n",
        "            ),\n",
        "            'xgboost': xgb.XGBClassifier(\n",
        "                n_estimators=100,\n",
        "                max_depth=6,\n",
        "                learning_rate=0.1,\n",
        "                subsample=0.8,\n",
        "                colsample_bytree=0.8,\n",
        "                gamma=0,\n",
        "                min_child_weight=1,\n",
        "                random_state=random_seed,\n",
        "                use_label_encoder=False,\n",
        "                eval_metric='logloss'\n",
        "            )\n",
        "        }\n",
        "\n",
        "    elif regularization_strength == 'moderate':\n",
        "        # Moderate regularization for small datasets\n",
        "        models = {\n",
        "            'logistic_regression': LogisticRegression(\n",
        "                C=0.5,  # Increased regularization\n",
        "                penalty='l2',\n",
        "                class_weight='balanced',\n",
        "                solver='liblinear',\n",
        "                max_iter=1000,\n",
        "                random_state=random_seed\n",
        "            ),\n",
        "            'random_forest': RandomForestClassifier(\n",
        "                n_estimators=75,  # Fewer trees\n",
        "                max_depth=15,     # Limit depth\n",
        "                min_samples_split=5,  # Higher minimum splits\n",
        "                min_samples_leaf=2,   # Higher minimum leaf samples\n",
        "                class_weight='balanced',\n",
        "                random_state=random_seed\n",
        "            ),\n",
        "            'decision_tree': DecisionTreeClassifier(\n",
        "                max_depth=12,     # Limit depth significantly\n",
        "                min_samples_split=8,\n",
        "                min_samples_leaf=4,\n",
        "                class_weight='balanced',\n",
        "                random_state=random_seed\n",
        "            ),\n",
        "            'xgboost': xgb.XGBClassifier(\n",
        "                n_estimators=75,\n",
        "                max_depth=4,      # Shallower trees\n",
        "                learning_rate=0.05,  # Slower learning\n",
        "                subsample=0.8,\n",
        "                colsample_bytree=0.8,\n",
        "                gamma=0.5,        # Some regularization\n",
        "                min_child_weight=3,\n",
        "                reg_alpha=0.1,    # L1 regularization\n",
        "                reg_lambda=0.1,   # L2 regularization\n",
        "                random_state=random_seed,\n",
        "                use_label_encoder=False,\n",
        "                eval_metric='logloss'\n",
        "            )\n",
        "        }\n",
        "\n",
        "    elif regularization_strength == 'strong':\n",
        "        # Strong regularization for very small datasets\n",
        "        models = {\n",
        "            'logistic_regression': LogisticRegression(\n",
        "                C=0.1,  # Strong regularization\n",
        "                penalty='l1',  # L1 for feature selection\n",
        "                class_weight='balanced',\n",
        "                solver='liblinear',\n",
        "                max_iter=1000,\n",
        "                random_state=random_seed\n",
        "            ),\n",
        "            'random_forest': RandomForestClassifier(\n",
        "                n_estimators=50,  # Fewer trees\n",
        "                max_depth=10,     # Strict depth limit\n",
        "                min_samples_split=10,  # Higher minimum splits\n",
        "                min_samples_leaf=5,    # Higher minimum leaf samples\n",
        "                class_weight='balanced',\n",
        "                random_state=random_seed\n",
        "            ),\n",
        "            'decision_tree': DecisionTreeClassifier(\n",
        "                max_depth=8,      # Very limited depth\n",
        "                min_samples_split=12,\n",
        "                min_samples_leaf=6,\n",
        "                class_weight='balanced',\n",
        "                random_state=random_seed\n",
        "            ),\n",
        "            'xgboost': xgb.XGBClassifier(\n",
        "                n_estimators=50,\n",
        "                max_depth=3,      # Very shallow trees\n",
        "                learning_rate=0.03,  # Very slow learning\n",
        "                subsample=0.7,\n",
        "                colsample_bytree=0.7,\n",
        "                gamma=1,          # Higher gamma\n",
        "                min_child_weight=5,\n",
        "                reg_alpha=1,      # Strong L1 regularization\n",
        "                reg_lambda=1,     # Strong L2 regularization\n",
        "                random_state=random_seed,\n",
        "                use_label_encoder=False,\n",
        "                eval_metric='logloss'\n",
        "            )\n",
        "        }\n",
        "\n",
        "    return models"
      ],
      "metadata": {
        "id": "AC-bPGeVtOts"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 10: Overfitting detection functions\n",
        "def detect_overfitting(model, X_train, y_train, X_val, y_val, X_test, y_test, model_name):\n",
        "    \"\"\"Detect overfitting by comparing train/val/test performance.\"\"\"\n",
        "\n",
        "    # Get predictions\n",
        "    train_pred = model.predict(X_train)\n",
        "    val_pred = model.predict(X_val)\n",
        "    test_pred = model.predict(X_test)\n",
        "\n",
        "    # Calculate metrics\n",
        "    train_f1 = f1_score(y_train, train_pred)\n",
        "    val_f1 = f1_score(y_val, val_pred)\n",
        "    test_f1 = f1_score(y_test, test_pred)\n",
        "\n",
        "    train_mcc = matthews_corrcoef(y_train, train_pred)\n",
        "    val_mcc = matthews_corrcoef(y_val, val_pred)\n",
        "    test_mcc = matthews_corrcoef(y_test, test_pred)\n",
        "\n",
        "    # Calculate gaps\n",
        "    train_test_f1_gap = train_f1 - test_f1\n",
        "    train_test_mcc_gap = train_mcc - test_mcc\n",
        "\n",
        "    # Overfitting assessment\n",
        "    if train_test_f1_gap > 0.1:\n",
        "        overfitting_level = \"SEVERE\"\n",
        "    elif train_test_f1_gap > 0.05:\n",
        "        overfitting_level = \"MODERATE\"\n",
        "    elif train_test_f1_gap > 0.02:\n",
        "        overfitting_level = \"MILD\"\n",
        "    else:\n",
        "        overfitting_level = \"MINIMAL\"\n",
        "\n",
        "    print(f\"\\n{model_name} Overfitting Analysis:\")\n",
        "    print(f\"  F1 - Train: {train_f1:.4f}, Val: {val_f1:.4f}, Test: {test_f1:.4f}\")\n",
        "    print(f\"  MCC - Train: {train_mcc:.4f}, Val: {val_mcc:.4f}, Test: {test_mcc:.4f}\")\n",
        "    print(f\"  Train-Test F1 Gap: {train_test_f1_gap:.4f}\")\n",
        "    print(f\"  Overfitting Level: {overfitting_level}\")\n",
        "\n",
        "    return {\n",
        "        'train_test_f1_gap': train_test_f1_gap,\n",
        "        'train_test_mcc_gap': train_test_mcc_gap,\n",
        "        'overfitting_level': overfitting_level,\n",
        "        'test_f1': test_f1,\n",
        "        'test_mcc': test_mcc\n",
        "    }"
      ],
      "metadata": {
        "id": "_El4lXsotRr9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def cross_validate_model(model, X, y, cv_folds=5, random_seed=42):\n",
        "    \"\"\"Perform cross-validation to assess model stability.\"\"\"\n",
        "\n",
        "    cv = StratifiedKFold(n_splits=cv_folds, shuffle=True, random_state=random_seed)\n",
        "\n",
        "    # Calculate multiple metrics\n",
        "    f1_scores = cross_val_score(model, X, y, cv=cv, scoring='f1')\n",
        "    mcc_scores = cross_val_score(model, X, y, cv=cv, scoring='matthews_corrcoef')\n",
        "\n",
        "    print(f\"Cross-Validation Results:\")\n",
        "    print(f\"  F1 - Mean: {f1_scores.mean():.4f}, Std: {f1_scores.std():.4f}\")\n",
        "    print(f\"  MCC - Mean: {mcc_scores.mean():.4f}, Std: {mcc_scores.std():.4f}\")\n",
        "\n",
        "    # Stability assessment\n",
        "    if f1_scores.std() < 0.05:\n",
        "        stability = \"HIGH\"\n",
        "    elif f1_scores.std() < 0.1:\n",
        "        stability = \"MEDIUM\"\n",
        "    else:\n",
        "        stability = \"LOW\"\n",
        "\n",
        "    print(f\"  Stability: {stability}\")\n",
        "\n",
        "    return {\n",
        "        'cv_f1_mean': f1_scores.mean(),\n",
        "        'cv_f1_std': f1_scores.std(),\n",
        "        'cv_mcc_mean': mcc_scores.mean(),\n",
        "        'cv_mcc_std': mcc_scores.std(),\n",
        "        'stability': stability\n",
        "    }"
      ],
      "metadata": {
        "id": "Bp2vjCl-6ues"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_learning_curve(model, X, y, model_name, cv=5):\n",
        "    \"\"\"Plot learning curves to visualize overfitting.\"\"\"\n",
        "\n",
        "    train_sizes = np.linspace(0.1, 1.0, 10)\n",
        "    train_sizes_abs, train_scores, val_scores = learning_curve(\n",
        "        model, X, y, cv=cv, scoring='f1', train_sizes=train_sizes, random_state=42\n",
        "    )\n",
        "\n",
        "    train_mean = np.mean(train_scores, axis=1)\n",
        "    train_std = np.std(train_scores, axis=1)\n",
        "    val_mean = np.mean(val_scores, axis=1)\n",
        "    val_std = np.std(val_scores, axis=1)\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(train_sizes_abs, train_mean, 'o-', color='blue', label='Training F1')\n",
        "    plt.fill_between(train_sizes_abs, train_mean - train_std, train_mean + train_std, alpha=0.2, color='blue')\n",
        "\n",
        "    plt.plot(train_sizes_abs, val_mean, 'o-', color='red', label='Validation F1')\n",
        "    plt.fill_between(train_sizes_abs, val_mean - val_std, val_mean + val_std, alpha=0.2, color='red')\n",
        "\n",
        "    plt.xlabel('Training Set Size')\n",
        "    plt.ylabel('F1 Score')\n",
        "    plt.title(f'Learning Curves - {model_name}')\n",
        "    plt.legend()\n",
        "    plt.grid(True, alpha=0.3)\n",
        "\n",
        "    # Add overfitting indicator\n",
        "    final_gap = train_mean[-1] - val_mean[-1]\n",
        "    plt.text(0.7 * train_sizes_abs[-1], 0.1, f'Final Gap: {final_gap:.3f}',\n",
        "             bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"yellow\", alpha=0.7))\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(results_dir, 'visualizations', f\"{model_name}_learning_curve.png\"))\n",
        "    plt.show()\n",
        "\n",
        "    return final_gap"
      ],
      "metadata": {
        "id": "urpP4OJ86-7g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 11: Hyperparameter optimization with Optuna (overfitting-aware)\n",
        "def optimize_with_optuna(model_class, X_train, y_train, X_val, y_val, model_name, n_trials=20, regularization_aware=True):\n",
        "    \"\"\"Optimize hyperparameters using Optuna with overfitting awareness.\"\"\"\n",
        "    print(f\"Optimizing hyperparameters for {model_name} using Optuna (overfitting-aware)...\")\n",
        "\n",
        "    def objective(trial):\n",
        "        # Configure parameters based on model type with regularization focus\n",
        "        if model_name == 'logistic_regression':\n",
        "            params = {\n",
        "                'C': trial.suggest_float('C', 0.01, 10, log=True),  # Wider range, favoring regularization\n",
        "                'penalty': trial.suggest_categorical('penalty', ['l1', 'l2']),\n",
        "                'solver': trial.suggest_categorical('solver', ['liblinear', 'saga']),\n",
        "                'class_weight': 'balanced',\n",
        "                'max_iter': 1000,\n",
        "                'random_state': 42\n",
        "            }\n",
        "            model = model_class(**params)\n",
        "\n",
        "        elif model_name == 'random_forest':\n",
        "            params = {\n",
        "                'n_estimators': trial.suggest_int('n_estimators', 25, 150),  # Lower upper bound\n",
        "                'max_depth': trial.suggest_int('max_depth', 5, 20),  # Lower upper bound\n",
        "                'min_samples_split': trial.suggest_int('min_samples_split', 5, 20),  # Higher lower bound\n",
        "                'min_samples_leaf': trial.suggest_int('min_samples_leaf', 2, 10),  # Higher lower bound\n",
        "                'class_weight': 'balanced',\n",
        "                'random_state': 42\n",
        "            }\n",
        "            model = model_class(**params)\n",
        "\n",
        "        elif model_name == 'decision_tree':\n",
        "            params = {\n",
        "                'max_depth': trial.suggest_int('max_depth', 3, 15),  # Lower upper bound\n",
        "                'min_samples_split': trial.suggest_int('min_samples_split', 8, 25),  # Higher bounds\n",
        "                'min_samples_leaf': trial.suggest_int('min_samples_leaf', 4, 15),  # Higher bounds\n",
        "                'criterion': trial.suggest_categorical('criterion', ['gini', 'entropy']),\n",
        "                'class_weight': 'balanced',\n",
        "                'random_state': 42\n",
        "            }\n",
        "            model = model_class(**params)\n",
        "\n",
        "        elif model_name == 'xgboost':\n",
        "            params = {\n",
        "                'n_estimators': trial.suggest_int('n_estimators', 25, 150),  # Lower upper bound\n",
        "                'max_depth': trial.suggest_int('max_depth', 2, 8),  # Lower upper bound\n",
        "                'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.2, log=True),  # Lower upper bound\n",
        "                'subsample': trial.suggest_float('subsample', 0.6, 0.9),\n",
        "                'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 0.9),\n",
        "                'gamma': trial.suggest_float('gamma', 0, 2),  # Add regularization\n",
        "                'reg_alpha': trial.suggest_float('reg_alpha', 0, 1),  # L1 regularization\n",
        "                'reg_lambda': trial.suggest_float('reg_lambda', 0, 1),  # L2 regularization\n",
        "                'random_state': 42,\n",
        "                'use_label_encoder': False,\n",
        "                'eval_metric': 'logloss'\n",
        "            }\n",
        "            model = model_class(**params)\n",
        "\n",
        "        # Train the model\n",
        "        model.fit(X_train, y_train)\n",
        "\n",
        "        # Evaluate on validation set\n",
        "        y_val_pred = model.predict(X_val)\n",
        "        mcc = matthews_corrcoef(y_val, y_val_pred)\n",
        "\n",
        "        # Add overfitting penalty if regularization_aware is True\n",
        "        if regularization_aware:\n",
        "            y_train_pred = model.predict(X_train)\n",
        "            train_mcc = matthews_corrcoef(y_train, y_train_pred)\n",
        "\n",
        "            # Penalize large train-val gaps\n",
        "            gap_penalty = max(0, train_mcc - mcc - 0.05) * 0.5  # Penalty for gaps > 0.05\n",
        "            mcc_adjusted = mcc - gap_penalty\n",
        "\n",
        "            return mcc_adjusted\n",
        "        else:\n",
        "            return mcc\n",
        "\n",
        "    # Create study and optimize\n",
        "    study = optuna.create_study(direction='maximize')\n",
        "    study.optimize(objective, n_trials=n_trials)\n",
        "\n",
        "    print(f\"Best parameters: {study.best_params}\")\n",
        "    print(f\"Best adjusted MCC score: {study.best_value:.4f}\")\n",
        "\n",
        "    # Get best parameters\n",
        "    best_params = study.best_params\n",
        "\n",
        "    # Create and train model with best parameters\n",
        "    if model_name == 'logistic_regression':\n",
        "        best_model = model_class(\n",
        "            C=best_params['C'],\n",
        "            penalty=best_params['penalty'],\n",
        "            solver=best_params['solver'],\n",
        "            class_weight='balanced',\n",
        "            max_iter=1000,\n",
        "            random_state=42\n",
        "        )\n",
        "    elif model_name == 'random_forest':\n",
        "        best_model = model_class(\n",
        "            n_estimators=best_params['n_estimators'],\n",
        "            max_depth=best_params['max_depth'],\n",
        "            min_samples_split=best_params['min_samples_split'],\n",
        "            min_samples_leaf=best_params['min_samples_leaf'],\n",
        "            class_weight='balanced',\n",
        "            random_state=42\n",
        "        )\n",
        "    elif model_name == 'decision_tree':\n",
        "        best_model = model_class(\n",
        "            max_depth=best_params['max_depth'],\n",
        "            min_samples_split=best_params['min_samples_split'],\n",
        "            min_samples_leaf=best_params['min_samples_leaf'],\n",
        "            criterion=best_params['criterion'],\n",
        "            class_weight='balanced',\n",
        "            random_state=42\n",
        "        )\n",
        "    elif model_name == 'xgboost':\n",
        "        # Updated to include new regularization parameters\n",
        "        best_model = model_class(\n",
        "            n_estimators=best_params['n_estimators'],\n",
        "            max_depth=best_params['max_depth'],\n",
        "            learning_rate=best_params['learning_rate'],\n",
        "            subsample=best_params['subsample'],\n",
        "            colsample_bytree=best_params['colsample_bytree'],\n",
        "            gamma=best_params['gamma'],\n",
        "            reg_alpha=best_params.get('reg_alpha', 0),  # New L1 regularization\n",
        "            reg_lambda=best_params.get('reg_lambda', 0),  # New L2 regularization\n",
        "            random_state=42,\n",
        "            use_label_encoder=False,\n",
        "            eval_metric='logloss'\n",
        "        )\n",
        "\n",
        "    # Train on the full training set\n",
        "    best_model.fit(X_train, y_train)\n",
        "\n",
        "    # Save the study for later visualization\n",
        "    optuna_results_dir = os.path.join(results_dir, 'optuna_results')\n",
        "    os.makedirs(optuna_results_dir, exist_ok=True)\n",
        "    with open(os.path.join(optuna_results_dir, f'{model_name}_study.pkl'), 'wb') as f:\n",
        "        joblib.dump(study, f)\n",
        "\n",
        "    return best_model, best_params\n",
        "\n",
        "# Initialize models\n",
        "models = get_models(random_seed=42)\n",
        "\n",
        "# Run Optuna optimization for each model\n",
        "optimized_models = {}\n",
        "best_params_dict = {}  # To store best parameters\n",
        "\n",
        "for model_name, model in models.items():\n",
        "    optimized_model, best_params = optimize_with_optuna(\n",
        "        model.__class__,  # Pass the model class\n",
        "        X_train_tfidf_resampled,\n",
        "        y_train_resampled,\n",
        "        X_val_tfidf,  # Use validation set for evaluating during optimization\n",
        "        y_val,\n",
        "        model_name=model_name,\n",
        "        n_trials=20  # Adjust based on your time constraints\n",
        "    )\n",
        "\n",
        "    optimized_models[model_name] = optimized_model\n",
        "    best_params_dict[model_name] = best_params  # Store the best parameters"
      ],
      "metadata": {
        "id": "XIzHkHtA7FBJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 12: Test different regularization strengths\n",
        "print(\"\\n===== TESTING DIFFERENT REGULARIZATION STRENGTHS =====\")\n",
        "\n",
        "# Test different regularization levels\n",
        "regularization_levels = ['light', 'moderate', 'strong']\n",
        "regularization_results = {}\n",
        "\n",
        "for reg_level in regularization_levels:\n",
        "    print(f\"\\n--- Testing {reg_level.upper()} regularization ---\")\n",
        "\n",
        "    # Get models with this regularization level\n",
        "    reg_models = get_models(random_seed=42, regularization_strength=reg_level)\n",
        "\n",
        "    reg_level_results = {}\n",
        "\n",
        "    for model_name, model in reg_models.items():\n",
        "        print(f\"\\nTraining {model_name} with {reg_level} regularization...\")\n",
        "\n",
        "        # Train model\n",
        "        model.fit(X_train_tfidf_resampled, y_train_resampled)\n",
        "\n",
        "        # Overfitting analysis\n",
        "        overfitting_info = detect_overfitting(\n",
        "            model, X_train_tfidf_resampled, y_train_resampled,\n",
        "            X_val_tfidf, y_val, X_test_tfidf, y_test, model_name\n",
        "        )\n",
        "\n",
        "        # Cross-validation\n",
        "        cv_info = cross_validate_model(model, X_train_tfidf_resampled, y_train_resampled)\n",
        "\n",
        "        # Combine results\n",
        "        reg_level_results[model_name] = {**overfitting_info, **cv_info}\n",
        "\n",
        "        # Plot learning curve for moderate regularization to avoid too many plots\n",
        "        if reg_level == 'moderate':\n",
        "            plot_learning_curve(model, X_train_tfidf_resampled, y_train_resampled,\n",
        "                               f\"{model_name}_{reg_level}\")\n",
        "\n",
        "    regularization_results[reg_level] = reg_level_results"
      ],
      "metadata": {
        "id": "9HBt3blwtbxN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 13: Regularization comparison and recommendations\n",
        "print(\"\\n===== REGULARIZATION COMPARISON AND RECOMMENDATIONS =====\")\n",
        "\n",
        "# Create comparison DataFrame\n",
        "comparison_data = []\n",
        "for reg_level, models_results in regularization_results.items():\n",
        "    for model_name, results in models_results.items():\n",
        "        comparison_data.append({\n",
        "            'Regularization': reg_level,\n",
        "            'Model': model_name,\n",
        "            'Test_F1': results['test_f1'],\n",
        "            'Test_MCC': results['test_mcc'],\n",
        "            'Train_Test_Gap': results['train_test_f1_gap'],\n",
        "            'Overfitting_Level': results['overfitting_level'],\n",
        "            'CV_F1_Mean': results['cv_f1_mean'],\n",
        "            'CV_F1_Std': results['cv_f1_std'],\n",
        "            'Stability': results['stability']\n",
        "        })\n",
        "\n",
        "reg_comparison_df = pd.DataFrame(comparison_data)\n",
        "\n",
        "# Save comparison results\n",
        "reg_comparison_df.to_csv(os.path.join(results_dir, 'metrics', 'regularization_comparison.csv'), index=False)\n",
        "\n",
        "# Display best models by different criteria\n",
        "print(\"\\nBest models by Test MCC:\")\n",
        "print(reg_comparison_df.nlargest(5, 'Test_MCC')[['Model', 'Regularization', 'Test_MCC', 'Train_Test_Gap', 'Overfitting_Level']])\n",
        "\n",
        "print(\"\\nMost stable models (lowest CV std):\")\n",
        "print(reg_comparison_df.nsmallest(5, 'CV_F1_Std')[['Model', 'Regularization', 'CV_F1_Mean', 'CV_F1_Std', 'Stability']])\n",
        "\n",
        "print(\"\\nLeast overfitted models (smallest train-test gap):\")\n",
        "print(reg_comparison_df.nsmallest(5, 'Train_Test_Gap')[['Model', 'Regularization', 'Test_MCC', 'Train_Test_Gap', 'Overfitting_Level']])\n",
        "\n",
        "# Visualization\n",
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "# Plot 1: Test MCC vs Train-Test Gap\n",
        "plt.subplot(2, 2, 1)\n",
        "scatter = plt.scatter(reg_comparison_df['Train_Test_Gap'], reg_comparison_df['Test_MCC'],\n",
        "                     c=reg_comparison_df['Regularization'].map({'light': 0, 'moderate': 1, 'strong': 2}),\n",
        "                     cmap='viridis', alpha=0.7)\n",
        "plt.xlabel('Train-Test F1 Gap (Overfitting)')\n",
        "plt.ylabel('Test MCC')\n",
        "plt.title('Test Performance vs Overfitting')\n",
        "plt.colorbar(scatter, ticks=[0, 1, 2], label='Regularization')\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "# Plot 2: CV stability vs Test performance\n",
        "plt.subplot(2, 2, 2)\n",
        "plt.scatter(reg_comparison_df['CV_F1_Std'], reg_comparison_df['Test_MCC'],\n",
        "           c=reg_comparison_df['Regularization'].map({'light': 0, 'moderate': 1, 'strong': 2}),\n",
        "           cmap='viridis', alpha=0.7)\n",
        "plt.xlabel('CV F1 Std (Instability)')\n",
        "plt.ylabel('Test MCC')\n",
        "plt.title('Test Performance vs Model Stability')\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "# Plot 3: Regularization effect on overfitting\n",
        "plt.subplot(2, 2, 3)\n",
        "reg_overfitting = reg_comparison_df.groupby('Regularization')['Train_Test_Gap'].mean()\n",
        "plt.bar(reg_overfitting.index, reg_overfitting.values)\n",
        "plt.ylabel('Average Train-Test F1 Gap')\n",
        "plt.title('Regularization Effect on Overfitting')\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "# Plot 4: Regularization effect on performance\n",
        "plt.subplot(2, 2, 4)\n",
        "reg_performance = reg_comparison_df.groupby('Regularization')['Test_MCC'].mean()\n",
        "plt.bar(reg_performance.index, reg_performance.values)\n",
        "plt.ylabel('Average Test MCC')\n",
        "plt.title('Regularization Effect on Performance')\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig(os.path.join(results_dir, 'visualizations', 'regularization_analysis.png'), dpi=300, bbox_inches='tight')\n",
        "plt.show()\n",
        "\n",
        "# Final recommendation\n",
        "best_overall = reg_comparison_df.loc[\n",
        "    (reg_comparison_df['Train_Test_Gap'] < 0.05) &  # Low overfitting\n",
        "    (reg_comparison_df['CV_F1_Std'] < 0.1)  # Good stability\n",
        "].nlargest(1, 'Test_MCC')\n",
        "\n",
        "if not best_overall.empty:\n",
        "    best = best_overall.iloc[0]\n",
        "    print(f\"\\nRECOMMENDED MODEL:\")\n",
        "    print(f\"Model: {best['Model']}\")\n",
        "    print(f\"Regularization: {best['Regularization']}\")\n",
        "    print(f\"Test MCC: {best['Test_MCC']:.4f}\")\n",
        "    print(f\"Overfitting Level: {best['Overfitting_Level']}\")\n",
        "    print(f\"Stability: {best['Stability']}\")\n",
        "else:\n",
        "    print(\"\\nNo model meets the stability criteria. Consider:\")\n",
        "    print(\"1. Collecting more data\")\n",
        "    print(\"2. Using stronger regularization\")\n",
        "    print(\"3. Feature selection\")\n",
        "    print(\"4. Ensemble methods\")"
      ],
      "metadata": {
        "id": "yAGfO6Bs9aPL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 14: Train and evaluate optimized models with best regularization\n",
        "def train_and_evaluate_model(model, model_name, X_train, y_train, X_val, y_val, X_test, y_test):\n",
        "    \"\"\"Train and evaluate a model.\"\"\"\n",
        "    print(f\"\\nTraining {model_name}...\")\n",
        "\n",
        "    # Start timing\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Train the model\n",
        "    model.fit(X_train, y_train)\n",
        "\n",
        "    # Record training time\n",
        "    train_time = time.time() - start_time\n",
        "    print(f\"Training time: {train_time:.2f} seconds\")\n",
        "\n",
        "    # Generate predictions\n",
        "    y_train_pred = model.predict(X_train)\n",
        "    y_val_pred = model.predict(X_val)\n",
        "    y_test_pred = model.predict(X_test)\n",
        "\n",
        "    # Generate probabilities for ROC and PR curves\n",
        "    if hasattr(model, 'predict_proba'):\n",
        "        y_test_prob = model.predict_proba(X_test)[:, 1]\n",
        "    else:\n",
        "        # For models without predict_proba\n",
        "        if hasattr(model, 'decision_function'):\n",
        "            y_test_prob = model.decision_function(X_test)\n",
        "        else:\n",
        "            y_test_prob = y_test_pred\n",
        "\n",
        "    # Calculate metrics\n",
        "    train_acc = accuracy_score(y_train, y_train_pred)\n",
        "    val_acc = accuracy_score(y_val, y_val_pred)\n",
        "    test_acc = accuracy_score(y_test, y_test_pred)\n",
        "\n",
        "    train_f1 = f1_score(y_train, y_train_pred)\n",
        "    val_f1 = f1_score(y_val, y_val_pred)\n",
        "    test_f1 = f1_score(y_test, y_test_pred)\n",
        "\n",
        "    train_mcc = matthews_corrcoef(y_train, y_train_pred)\n",
        "    val_mcc = matthews_corrcoef(y_val, y_val_pred)\n",
        "    test_mcc = matthews_corrcoef(y_test, y_test_pred)\n",
        "\n",
        "    test_precision = precision_score(y_test, y_test_pred)\n",
        "    test_recall = recall_score(y_test, y_test_pred)\n",
        "    test_roc_auc = roc_auc_score(y_test, y_test_prob)\n",
        "    test_pr_auc = average_precision_score(y_test, y_test_prob)\n",
        "\n",
        "    # Confusion matrix\n",
        "    test_cm = confusion_matrix(y_test, y_test_pred)\n",
        "\n",
        "    # Print metrics\n",
        "    print(f\"Training - Accuracy: {train_acc:.4f}, F1: {train_f1:.4f}, MCC: {train_mcc:.4f}\")\n",
        "    print(f\"Validation - Accuracy: {val_acc:.4f}, F1: {val_f1:.4f}, MCC: {val_mcc:.4f}\")\n",
        "    print(f\"Testing - Accuracy: {test_acc:.4f}, F1: {test_f1:.4f}, MCC: {test_mcc:.4f}\")\n",
        "    print(f\"Testing - Precision: {test_precision:.4f}, Recall: {test_recall:.4f}\")\n",
        "    print(f\"Testing - ROC AUC: {test_roc_auc:.4f}, PR AUC: {test_pr_auc:.4f}\")\n",
        "    print(f\"Testing - Confusion Matrix:\\n{test_cm}\")\n",
        "\n",
        "    # Create a dictionary of results\n",
        "    results = {\n",
        "        'model_name': model_name,\n",
        "        'training_time': train_time,\n",
        "        'train_acc': train_acc,\n",
        "        'val_acc': val_acc,\n",
        "        'test_acc': test_acc,\n",
        "        'train_f1': train_f1,\n",
        "        'val_f1': val_f1,\n",
        "        'test_f1': test_f1,\n",
        "        'train_mcc': train_mcc,\n",
        "        'val_mcc': val_mcc,\n",
        "        'test_mcc': test_mcc,\n",
        "        'test_precision': test_precision,\n",
        "        'test_recall': test_recall,\n",
        "        'test_roc_auc': test_roc_auc,\n",
        "        'test_pr_auc': test_pr_auc,\n",
        "        'test_confusion_matrix': test_cm,\n",
        "        'y_test_pred': y_test_pred,\n",
        "        'y_test_prob': y_test_prob,\n",
        "        'model': model\n",
        "    }\n",
        "\n",
        "    # Visualize confusion matrix\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    sns.heatmap(test_cm, annot=True, fmt='d', cmap='Blues',\n",
        "                xticklabels=['Legitimate', 'Scam'],\n",
        "                yticklabels=['Legitimate', 'Scam'])\n",
        "    plt.title(f'{model_name} - Confusion Matrix')\n",
        "    plt.ylabel('True Label')\n",
        "    plt.xlabel('Predicted Label')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(os.path.join(results_dir, 'visualizations', f\"{model_name.lower().replace(' ', '_')}_confusion_matrix.png\"))\n",
        "    plt.show()\n",
        "\n",
        "    # Save the model\n",
        "    model_filename = os.path.join(model_dir, f\"{model_name.lower().replace(' ', '_')}.pkl\")\n",
        "    joblib.dump(model, model_filename)\n",
        "    print(f\"Model saved to {model_filename}\")\n",
        "\n",
        "    return results, model\n",
        "\n",
        "# Train and evaluate optimized models\n",
        "all_results = {}\n",
        "for model_name, model in optimized_models.items():\n",
        "    # Use the SMOTE-resampled TF-IDF features for training\n",
        "    # But evaluate on the original validation and test sets\n",
        "    results, trained_model = train_and_evaluate_model(\n",
        "        model, model_name,\n",
        "        X_train_tfidf_resampled, y_train_resampled,  # Use resampled training data\n",
        "        X_val_tfidf, y_val,  # Use original validation data\n",
        "        X_test_tfidf, y_test  # Use original test data\n",
        "    )\n",
        "\n",
        "    # Store results\n",
        "    all_results[model_name] = results"
      ],
      "metadata": {
        "id": "QG0rv4D698Dr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 15: Model comparison\n",
        "# Create a comparison DataFrame\n",
        "comparison_data = []\n",
        "for model_name, results in all_results.items():\n",
        "    comparison_data.append({\n",
        "        'Model': model_name,\n",
        "        'Training Time (s)': results['training_time'],\n",
        "        'Train Accuracy': results['train_acc'],\n",
        "        'Val Accuracy': results['val_acc'],\n",
        "        'Test Accuracy': results['test_acc'],\n",
        "        'Train F1': results['train_f1'],\n",
        "        'Val F1': results['val_f1'],\n",
        "        'Test F1': results['test_f1'],\n",
        "        'Train MCC': results['train_mcc'],\n",
        "        'Val MCC': results['val_mcc'],\n",
        "        'Test MCC': results['test_mcc'],\n",
        "        'Test Precision': results['test_precision'],\n",
        "        'Test Recall': results['test_recall'],\n",
        "        'Test ROC AUC': results['test_roc_auc'],\n",
        "        'Test PR AUC': results['test_pr_auc']\n",
        "    })\n",
        "\n",
        "comparison_df = pd.DataFrame(comparison_data)\n",
        "\n",
        "# Sort by Test MCC score\n",
        "comparison_df = comparison_df.sort_values('Test MCC', ascending=False)\n",
        "\n",
        "# Save comparison results\n",
        "comparison_df.to_csv(os.path.join(results_dir, 'metrics', 'baseline_ml_results_regularized.csv'), index=False)\n",
        "\n",
        "# Display comparison table\n",
        "print(\"\\n===== FINAL MODEL COMPARISON =====\")\n",
        "print(comparison_df)"
      ],
      "metadata": {
        "id": "1dfSCeHPt5X-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 16: Visualize key metrics comparison\n",
        "metrics = ['Test F1', 'Test MCC', 'Test ROC AUC', 'Test PR AUC']\n",
        "\n",
        "# Create a melted DataFrame for visualization\n",
        "melted_df = pd.melt(comparison_df, id_vars=['Model'], value_vars=metrics, var_name='Metric', value_name='Score')\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(14, 8))\n",
        "sns.barplot(x='Model', y='Score', hue='Metric', data=melted_df)\n",
        "plt.title('Model Performance Comparison (Regularized)')\n",
        "plt.ylim(0, 1)\n",
        "plt.xticks(rotation=45)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.tight_layout()\n",
        "plt.savefig(os.path.join(results_dir, 'visualizations', \"baseline_model_comparison_regularized.png\"))\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "G4x_K2XT_ybs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 17: Plot combined ROC curves\n",
        "plt.figure(figsize=(10, 8))\n",
        "\n",
        "for model_name, results in all_results.items():\n",
        "    fpr, tpr, _ = roc_curve(y_test, results['y_test_prob'])\n",
        "    plt.plot(fpr, tpr, lw=2, label=f'{model_name} (AUC = {results[\"test_roc_auc\"]:.4f})')\n",
        "\n",
        "# Add random classifier line\n",
        "plt.plot([0, 1], [0, 1], 'k--', lw=2)\n",
        "\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC Curves for All Models (Regularized)')\n",
        "plt.legend(loc='lower right')\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.tight_layout()\n",
        "plt.savefig(os.path.join(results_dir, 'visualizations', \"combined_roc_curves_regularized.png\"))\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "TF5yJYrB_3n8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 18: Plot combined Precision-Recall curves\n",
        "plt.figure(figsize=(10, 8))\n",
        "\n",
        "for model_name, results in all_results.items():\n",
        "    precision, recall, _ = precision_recall_curve(y_test, results['y_test_prob'])\n",
        "    plt.step(recall, precision, where='post', lw=2, label=f'{model_name} (AP = {results[\"test_pr_auc\"]:.4f})')\n",
        "\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Precision-Recall Curves for All Models (Regularized)')\n",
        "plt.legend(loc='lower left')\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.tight_layout()\n",
        "plt.savefig(os.path.join(results_dir, 'visualizations', \"combined_pr_curves_regularized.png\"))\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "upxTOl60_70E"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
